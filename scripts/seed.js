const { db } = require('@vercel/postgres');
const { cocktails } = require('../app/lib/data.js');
const bcrypt = require('bcrypt');

async function seedUsers(client) {
  try {
    await client.sql`CREATE EXTENSION IF NOT EXISTS "uuid-ossp"`;
    // Create the "users" table if it doesn't exist
    const createTable = await client.sql`
      CREATE TABLE IF NOT EXISTS users (
        id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        email TEXT NOT NULL UNIQUE,
        password TEXT NOT NULL
      );
    `;

    console.log(`Created "users" table`);

    // Insert data into the "users" table
    const insertedUsers = await Promise.all(
      users.map(async (user) => {
        const hashedPassword = await bcrypt.hash(user.password, 10);
        return client.sql`
        INSERT INTO users (id, name, email, password)
        VALUES (${user.id}, ${user.name}, ${user.email}, ${hashedPassword})
        ON CONFLICT (id) DO NOTHING;
      `;
      }),
    );

    console.log(`Seeded ${insertedUsers.length} users`);

    return {
      createTable,
      users: insertedUsers,
    };
  } catch (error) {
    console.error('Error seeding users:', error);
    throw error;
  }
}

async function seedCocktails(client) {
  try {
    await client.sql`CREATE EXTENSION IF NOT EXISTS "uuid-ossp"`;

    // Drop the "cocktails" table if it exists
    await client.sql`DROP TABLE IF EXISTS cocktails`;

    console.log(`Dropped "cocktails" table`);

    // Create the "cocktails" table if it doesn't exist
    const createTable = await client.sql`
      CREATE TABLE IF NOT EXISTS cocktails (
        id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
        name varchar(50) NOT NULL,
        level_id integer NOT NULL,
        flavour_id integer NOT NULL,
        spirit_id integer NOT NULL
      );
    `;

    console.log(`Created "cocktails" table`);

    // Insert data into the "cocktails" table
    const insertedCocktails = await Promise.all(
      cocktails.map(
        (cocktail) => client.sql`
          INSERT INTO cocktails (id, name, level_id, flavour_id, spirit_id)
          VALUES (${cocktail.id}, ${cocktail.name}, ${cocktail.level_id}, ${cocktail.flavour_id}, ${cocktail.spirit_id})
          ON CONFLICT (id) DO NOTHING;
        `,
      ),
    );

    console.log(`Seeded ${insertedCocktails.length} cocktails`);

    return {
      createTable,
      cocktails: insertedCocktails,
    };
  } catch (error) {
    console.error('Error seeding cocktails:', error);
    throw error;
  }
}

async function main() {
  const client = await db.connect();
  // await seedUsers(client);
  await seedCocktails(client);

  await client.end();
}

main().catch((err) => {
  console.error(
    'An error occurred while attempting to seed the database:',
    err,
  );
});
